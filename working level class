from board import boards
from pacman import Ghost
import pygame
import copy
import math

class Level(object):
    def __init__(self):
        self.WIDTH = 900
        self.HEIGHT = 950
        self.screen = pygame.display.set_mode([self.WIDTH, self.HEIGHT])
        self.timer = pygame.time.Clock()
        self.fps = 60
        self.font = pygame.font.Font('freesansbold.ttf', 20)
        self.level = copy.deepcopy(boards)
        self.color = 'blue'
        self.PI = math.pi
        self.player_images = []
        for i in range(1, 5):
            self.player_images.append(pygame.transform.scale(pygame.image.load(f'assets/player_images/{i}.png'), (45, 45)))
        self.blinky_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/red.png'), (45, 45))
        self.pinky_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/pink.png'), (45, 45))
        self.inky_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/blue.png'), (45, 45))
        self.clyde_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/orange.png'), (45, 45))
        self.spooked_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/powerup.png'), (45, 45))
        self.dead_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/dead.png'), (45, 45))
        self.player_x = 450
        self.player_y = 663
        self.direction = 0
        self.blinky_x = 56
        self.blinky_y = 58
        self.blinky_direction = 0
        self.inky_x = 440
        self.inky_y = 388
        self.inky_direction = 2
        self.pinky_x = 440
        self.pinky_y = 438
        self.pinky_direction = 2
        self.clyde_x = 440
        self.clyde_y = 438
        self.clyde_direction = 2
        self.counter = 0
        self.flicker = False
        # R, L, U, D
        self.turns_allowed = [False, False, False, False]
        self.direction_command = 0
        self.player_speed = 2
        self.score = 0
        self.powerup = False
        self.power_counter = 0
        self.eaten_ghost = [False, False, False, False]
        self.targets = [(self.player_x, self.player_y), (self.player_x, self.player_y), (self.player_x, self.player_y), (self.player_x, self.player_y)]
        self.blinky_dead = False
        self.inky_dead = False
        self.clyde_dead = False
        self.pinky_dead = False
        self.blinky_box = False
        self.inky_box = False
        self.clyde_box = False
        self.pinky_box = False
        self.moving = False
        self.ghost_speeds = [2, 2, 2, 2]
        self.startup_counter = 0
        self.lives = 3
        self.game_over = False
        self.game_won = False
        
        def draw_misc():
            score_text = self.font.render(f'Score: {self.score}', True, 'white')
            self.screen.blit(score_text, (10, 920))
            if self.powerup:
                pygame.draw.circle(self.screen, 'blue', (140, 930), 15)
            for i in range(self.lives):
                self.screen.blit(pygame.transform.scale(self.player_images[0], (30, 30)), (650 + i * 40, 915))
            if self.game_over:
                pygame.draw.rect(self.screen, 'white', [50, 200, 800, 300],0, 10)
                pygame.draw.rect(self.screen, 'dark gray', [70, 220, 760, 260], 0, 10)
                gameover_text = self.font.render('Game over! Space bar to restart!', True, 'red')
                self.screen.blit(gameover_text, (100, 300))
            if self.game_won:
                pygame.draw.rect(self.screen, 'white', [50, 200, 800, 300],0, 10)
                pygame.draw.rect(self.screen, 'dark gray', [70, 220, 760, 260], 0, 10)
                gameover_text = self.font.render('Victory! Space bar to restart!', True, 'green')
                self.screen.blit(gameover_text, (100, 300))
        
        def check_collisions(scor, power, power_count, eaten_ghosts):
            num1 = (self.HEIGHT - 50) // 32
            num2 = self.WIDTH // 30
            if 0 < self.player_x < 870:
                if self.level[Ghost.center_y // num1][Ghost.center_x // num2] == 1:
                    self.level[Ghost.center_y // num1][Ghost.center_x // num2] = 0
                    scor += 10
                if self.level[Ghost.center_y // num1][Ghost.center_x // num2] == 2:
                    self.level[Ghost.center_y // num1][Ghost.center_x // num2] = 0
                    scor += 50
                    power = True
                    power_count = 0
                    eaten_ghosts = [False, False, False, False]
            return scor, power, power_count, eaten_ghosts
        
        def draw_board():
            num1 = ((self.HEIGHT - 50) // 32)
            num2 = (self.WIDTH // 30)
            for i in range(len(self.level)):
                for j in range(len(self.level[i])):
                    if self.level[i][j] == 1:
                        pygame.draw.circle(self.screen, 'white', (j * num2 + (0.5 * num2), i * num1 + (0.5 * num1)), 4)
                    if self.level[i][j] == 2 and not self.flicker:
                        pygame.draw.circle(self.screen, 'white', (j * num2 + (0.5 * num2), i * num1 + (0.5 * num1)), 10)
                    if self.level[i][j] == 3:
                        pygame.draw.line(self.screen, self.color, (j * num2 + (0.5 * num2), i * num1),
                                         (j * num2 + (0.5 * num2), i * num1 + num1), 3)
                    if self.level[i][j] == 4:
                        pygame.draw.line(self.screen, self.color, (j * num2, i * num1 + (0.5 * num1)),
                                         (j * num2 + num2, i * num1 + (0.5 * num1)), 3)
                    if self.level[i][j] == 5:
                        pygame.draw.arc(self.screen, self.color, [(j * num2 - (num2 * 0.4)) - 2, (i * num1 + (0.5 * num1)), num2, num1],
                                        0, self.PI / 2, 3)
                    if self.level[i][j] == 6:
                        pygame.draw.arc(self.screen, self.color,
                                        [(j * num2 + (num2 * 0.5)), (i * num1 + (0.5 * num1)), num2, num1], self.PI / 2, self.PI, 3)
                    if self.level[i][j] == 7:
                        pygame.draw.arc(self.screen, self.color, [(j * num2 + (num2 * 0.5)), (i * num1 - (0.4 * num1)), num2, num1], self.PI,
                                        3 * self.PI / 2, 3)
                    if self.level[i][j] == 8:
                        pygame.draw.arc(self.screen, self.color,
                                        [(j * num2 - (num2 * 0.4)) - 2, (i * num1 - (0.4 * num1)), num2, num1], 3 * self.PI / 2,
                                        2 * self.PI, 3)
                    if self.level[i][j] == 9:
                        pygame.draw.line(self.screen, 'white', (j * num2, i * num1 + (0.5 * num1)),
                                         (j * num2 + num2, i * num1 + (0.5 * num1)), 3)
                        
        def draw_player():
            # 0-RIGHT, 1-LEFT, 2-UP, 3-DOWN
            if self.direction == 0:
                self.screen.blit(self.player_images[self.counter // 5], (self.player_x, self.player_y))
            elif self.direction == 1:
                self.screen.blit(pygame.transform.flip(self.player_images[self.counter // 5], True, False), (self.player_x, self.player_y))
            elif self.direction == 2:
                self.screen.blit(pygame.transform.rotate(self.player_images[self.counter // 5], 90), (self.player_x, self.player_y))
            elif self.direction == 3:
                self.screen.blit(pygame.transform.rotate(self.player_images[self.counter // 5], 270), (self.player_x, self.player_y))
                
        def check_position(centerx, centery):
            turns = [False, False, False, False]
            num1 = (self.HEIGHT - 50) // 32
            num2 = (self.WIDTH // 30)
            num3 = 15
            # check collisions based on center x and center y of player +/- fudge number
            if centerx // 30 < 29:
                if self.direction == 0:
                    if self.level[centery // num1][(centerx - num3) // num2] < 3:
                        turns[1] = True
                if self.direction == 1:
                    if self.level[centery // num1][(centerx + num3) // num2] < 3:
                        turns[0] = True
                if self.direction == 2:
                    if self.level[(centery + num3) // num1][centerx // num2] < 3:
                        turns[3] = True
                if self.direction == 3:
                    if self.level[(centery - num3) // num1][centerx // num2] < 3:
                        turns[2] = True

                if self.direction == 2 or self.direction == 3:
                    if 12 <= centerx % num2 <= 18:
                        if self.level[(centery + num3) // num1][centerx // num2] < 3:
                            turns[3] = True
                        if self.level[(centery - num3) // num1][centerx // num2] < 3:
                            turns[2] = True
                    if 12 <= centery % num1 <= 18:
                        if self.level[centery // num1][(centerx - num2) // num2] < 3:
                            turns[1] = True
                        if self.level[centery // num1][(centerx + num2) // num2] < 3:
                            turns[0] = True
                if self.direction == 0 or self.direction == 1:
                    if 12 <= centerx % num2 <= 18:
                        if self.level[(centery + num1) // num1][centerx // num2] < 3:
                            turns[3] = True
                        if self.level[(centery - num1) // num1][centerx // num2] < 3:
                            turns[2] = True
                    if 12 <= centery % num1 <= 18:
                        if self.level[centery // num1][(centerx - num3) // num2] < 3:
                            turns[1] = True
                        if self.level[centery // num1][(centerx + num3) // num2] < 3:
                            turns[0] = True
            else:
                turns[0] = True
                turns[1] = True

            return turns
        
        def move_player(play_x, play_y):
            # r, l, u, d
            if self.direction == 0 and self.turns_allowed[0]:
                play_x += self.player_speed
            elif self.direction == 1 and self.turns_allowed[1]:
                play_x -= self.player_speed
            if self.direction == 2 and self.turns_allowed[2]:
                play_y -= self.player_speed
            elif self.direction == 3 and self.turns_allowed[3]:
                play_y += self.player_speed
            return play_x, play_y
        def get_targets(blink_x, blink_y, ink_x, ink_y, pink_x, pink_y, clyd_x, clyd_y):
            if self.player_x < 450:
                runaway_x = 900
            else:
                runaway_x = 0
            if self.player_y < 450:
                runaway_y = 900
            else:
                runaway_y = 0
            return_target = (380, 400)
            if self.powerup:
                if not self.blinky.dead and not self.eaten_ghost[0]:
                    blink_target = (runaway_x, runaway_y)
                elif not self.blinky.dead and self.eaten_ghost[0]:
                    if 340 < blink_x < 560 and 340 < blink_y < 500:
                        blink_target = (400, 100)
                    else:
                        blink_target = (self.player_x, self.player_y)
                else:
                    blink_target = return_target
                if not self.inky.dead and not self.eaten_ghost[1]:
                    ink_target = (runaway_x, self.player_y)
                elif not self.inky.dead and self.eaten_ghost[1]:
                    if 340 < ink_x < 560 and 340 < ink_y < 500:
                        ink_target = (400, 100)
                    else:
                        ink_target = (self.player_x, self.player_y)
                else:
                    ink_target = return_target
                if not self.pinky.dead:
                    pink_target = (self.player_x, runaway_y)
                elif not self.pinky.dead and self.eaten_ghost[2]:
                    if 340 < pink_x < 560 and 340 < pink_y < 500:
                        pink_target = (400, 100)
                    else:
                        pink_target = (self.player_x, self.player_y)
                else:
                    pink_target = return_target
                if not self.clyde.dead and not self.eaten_ghost[3]:
                    clyd_target = (450, 450)
                elif not self.clyde.dead and self.eaten_ghost[3]:
                    if 340 < clyd_x < 560 and 340 < clyd_y < 500:
                        clyd_target = (400, 100)
                    else:
                        clyd_target = (self.player_x, self.player_y)
                else:
                    clyd_target = return_target
            else:
                if not self.blinky.dead:
                    if 340 < blink_x < 560 and 340 < blink_y < 500:
                        blink_target = (400, 100)
                    else:
                        blink_target = (self.player_x, self.player_y)
                else:
                    blink_target = return_target
                if not self.inky.dead:
                    if 340 < ink_x < 560 and 340 < ink_y < 500:
                        ink_target = (400, 100)
                    else:
                        ink_target = (self.player_x, self.player_y)
                else:
                    ink_target = return_target
                if not self.pinky.dead:
                    if 340 < pink_x < 560 and 340 < pink_y < 500:
                        pink_target = (400, 100)
                    else:
                        pink_target = (self.player_x, self.player_y)
                else:
                    pink_target = return_target
                if not self.clyde.dead:
                    if 340 < clyd_x < 560 and 340 < clyd_y < 500:
                        clyd_target = (400, 100)
                    else:
                        clyd_target = (self.player_x, self.player_y)
                else:
                    clyd_target = return_target
            return [blink_target, ink_target, pink_target, clyd_target]


